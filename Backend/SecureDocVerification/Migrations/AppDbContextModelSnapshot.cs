// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecureDocVerification.Data;

#nullable disable

namespace SecureDocVerification.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecureDocVerification.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 7, 13, 49, 58, 992, DateTimeKind.Utc).AddTicks(6506),
                            FilePath = "/docs/sample1.pdf",
                            Status = "Pending",
                            Title = "Sample Document 1",
                            UserId = 1,
                            VerificationCode = "ABC123"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 7, 13, 49, 58, 992, DateTimeKind.Utc).AddTicks(6509),
                            FilePath = "/docs/sample2.pdf",
                            Status = "Pending",
                            Title = "Sample Document 2",
                            UserId = 2,
                            VerificationCode = "XYZ456"
                        });
                });

            modelBuilder.Entity("SecureDocVerification.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            Name = "Admin User",
                            Password = "admin123",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "user@example.com",
                            Name = "Regular User",
                            Password = "user123",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("SecureDocVerification.Models.VerificationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("VerificationLogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DocumentId = 1,
                            Status = "Success",
                            Timestamp = new DateTime(2025, 3, 7, 13, 49, 58, 992, DateTimeKind.Utc).AddTicks(6520),
                            VerifiedBy = "admin@example.com"
                        },
                        new
                        {
                            Id = 2,
                            DocumentId = 2,
                            Status = "Failed",
                            Timestamp = new DateTime(2025, 3, 7, 13, 49, 58, 992, DateTimeKind.Utc).AddTicks(6522),
                            VerifiedBy = "user@example.com"
                        });
                });

            modelBuilder.Entity("SecureDocVerification.Models.Document", b =>
                {
                    b.HasOne("SecureDocVerification.Models.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecureDocVerification.Models.VerificationLog", b =>
                {
                    b.HasOne("SecureDocVerification.Models.Document", "Document")
                        .WithMany("VerificationLogs")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("SecureDocVerification.Models.Document", b =>
                {
                    b.Navigation("VerificationLogs");
                });

            modelBuilder.Entity("SecureDocVerification.Models.User", b =>
                {
                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
